{"version":3,"sources":["pages/Forgot/index.js"],"names":["Forgot","useParams","id","token","useState","passwordError","setPasswordError","passwordRef","useRef","rePasswordRef","spinnerRef","p1Ref","p2Ref","changeToText","field","current","setAttribute","classList","add","changeToPassword","remove","console","log","className","ref","onChange","type","placeholder","onClick","e","preventDefault","value","length","axios","post","password","then","res","data","error","success","catch","err","resetPassword"],"mappings":"8MAuGeA,UA/FA,WAAO,IAAD,EACEC,cAAZC,EADU,EACVA,GAAGC,EADO,EACPA,MADO,EAEwBC,mBAAS,IAFjC,mBAEVC,EAFU,KAEIC,EAFJ,KAGXC,EAAcC,iBAAO,MACrBC,EAAgBD,iBAAO,MACvBE,EAAaF,iBAAO,MAGpBG,EAAQH,iBAAO,MACfI,EAAQJ,iBAAO,MAkCfK,EAAe,SAACC,GACL,OAAVA,IACIP,EAAYQ,SAASR,EAAYQ,QAAQC,aAAa,OAAO,QAC7DL,EAAMI,SAASJ,EAAMI,QAAQE,UAAUC,IAAI,YAErC,OAAVJ,IACIL,EAAcM,SAASN,EAAcM,QAAQC,aAAa,OAAO,QACjEL,EAAMI,SAASH,EAAMG,QAAQE,UAAUC,IAAI,aAIhDC,EAAmB,SAACL,GACT,OAAVA,IACIP,EAAYQ,SAASR,EAAYQ,QAAQC,aAAa,OAAO,YAC7DL,EAAMI,SAASJ,EAAMI,QAAQE,UAAUG,OAAO,YAExC,OAAVN,IACIL,EAAcM,SAASN,EAAcM,QAAQC,aAAa,OAAO,YACjEL,EAAMI,SAASH,EAAMG,QAAQE,UAAUG,OAAO,aAIzD,OADAC,QAAQC,IAAIpB,EAAGC,GAEX,qBAAKoB,UAAU,SAAf,SACI,qBAAKA,UAAU,wBAAf,SACI,sBAAKA,UAAU,eAAf,UACI,iCACI,qDACA,8BACI,sBAAKC,IAAKb,EAAOY,UAAU,iBAA3B,UACI,uBAAOE,SAAU,kBAAInB,EAAiB,KAAKkB,IAAKjB,EAAamB,KAAK,WAAWC,YAAY,uBACzF,cAAC,IAAD,CAAWC,QAAS,kBAAIf,EAAa,OAAOU,UAAU,cACtD,cAAC,IAAD,CAAoBK,QAAS,kBAAIT,EAAiB,OAAOI,UAAU,mBAG3E,8BACI,sBAAKC,IAAKZ,EAAOW,UAAU,iBAA3B,UACI,uBAAOE,SAAU,kBAAInB,EAAiB,KAAKkB,IAAKf,EAAeiB,KAAK,WAAWC,YAAY,0BAC3F,cAAC,IAAD,CAAWC,QAAS,kBAAIf,EAAa,OAAOU,UAAU,cACtD,cAAC,IAAD,CAAoBK,QAAS,kBAAIT,EAAiB,OAAOI,UAAU,mBAGxD,KAAlBlB,EAAqB,KAAM,mBAAGkB,UAAU,gBAAb,SAA8BlB,IAC1D,qBAAKkB,UAAU,cAAf,SAA6B,wBAASK,QAAS,SAAAC,GAAC,OA5E9C,SAACA,GACnBvB,EAAiB,IACjBuB,EAAEC,iBACsC,IAArCvB,EAAYQ,QAAQgB,MAAMC,QAAuD,IAAvCvB,EAAcM,QAAQgB,MAAMC,OAItEzB,EAAYQ,QAAQgB,QAAUtB,EAAcM,QAAQgB,MAIpDxB,EAAYQ,QAAQgB,MAAMC,OAAS,GAAKvB,EAAcM,QAAQgB,MAAMC,OAAS,EAC5E1B,EAAiB,uBAGrBI,EAAWK,QAAQE,UAAUC,IAAI,QACjCe,IAAMC,KAAK,wBAAwB,CAAChC,KAAGC,QAAMgC,SAAU5B,EAAYQ,QAAQgB,QACtEK,MAAK,SAAAC,GACCA,EAAIC,KAAKC,QACL7B,EAAWK,SAASL,EAAWK,QAAQE,UAAUG,OAAO,QAC3Dd,EAAiB+B,EAAIC,KAAKC,QAE3BF,EAAIC,KAAKE,UACRlC,EAAiB+B,EAAIC,KAAKE,SACvB9B,EAAWK,SAASL,EAAWK,QAAQE,UAAUG,OAAO,YAGlEqB,OAAM,SAAAC,GACAhC,EAAWK,SAASL,EAAWK,QAAQE,UAAUG,OAAO,QAC3DC,QAAQC,IAAI,aArBhBhB,EAAiB,0BAJjBA,EAAiB,2BAwE6CqC,CAAcd,IAAnC,kCAEjC,qBAAKN,UAAU,gBAAgBC,IAAKd,EAApC,SAAgD,cAAC,IAAD","file":"static/js/13.ded50b25.chunk.js","sourcesContent":["import React,{useRef,useState} from 'react';\r\nimport { useParams } from 'react-router';\r\nimport {AiFillEyeInvisible,AiFillEye} from \"react-icons/ai\";\r\nimport './forgot.css';\r\nimport axios from 'axios';\r\nimport {BiLoaderAlt} from \"react-icons/bi\";\r\n\r\n\r\nconst Forgot = () => {\r\n    const {id,token} = useParams();\r\n    const [passwordError,setPasswordError] = useState('');\r\n    const passwordRef = useRef(null);\r\n    const rePasswordRef = useRef(null);\r\n    const spinnerRef = useRef(null)\r\n\r\n    //these refs help in changing icon classes \r\n    const p1Ref = useRef(null);\r\n    const p2Ref = useRef(null)\r\n    const resetPassword = (e) =>{\r\n        setPasswordError('');\r\n        e.preventDefault();\r\n        if(passwordRef.current.value.length === 0 || rePasswordRef.current.value.length === 0){\r\n            setPasswordError('please enter a password');\r\n            return;\r\n        }\r\n        if(passwordRef.current.value !== rePasswordRef.current.value ){\r\n            setPasswordError(\"password doesn't match\");\r\n            return;\r\n        }\r\n        if(passwordRef.current.value.length < 6 || rePasswordRef.current.value.length < 6 ){\r\n            setPasswordError('password too short');\r\n            return;\r\n        }\r\n        spinnerRef.current.classList.add('show');\r\n        axios.post('/user/update-password',{id,token,password: passwordRef.current.value})//sending only one password\r\n            .then(res =>{\r\n                if(res.data.error){\r\n                    if(spinnerRef.current) spinnerRef.current.classList.remove('show');\r\n                    setPasswordError(res.data.error);\r\n                }\r\n                if(res.data.success){\r\n                    setPasswordError(res.data.success);\r\n                    if(spinnerRef.current) spinnerRef.current.classList.remove('show');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if(spinnerRef.current) spinnerRef.current.classList.remove('show');\r\n                console.log('error');\r\n            });\r\n    }\r\n    \r\n    const changeToText = (field) =>{\r\n        if(field === 'p1'){\r\n            if(passwordRef.current) passwordRef.current.setAttribute('type','text');\r\n            if(p1Ref.current) p1Ref.current.classList.add('visible');\r\n        }\r\n        if(field === 'p2'){\r\n            if(rePasswordRef.current) rePasswordRef.current.setAttribute('type','text');\r\n            if(p1Ref.current) p2Ref.current.classList.add('visible');\r\n        }\r\n    }\r\n\r\n    const changeToPassword = (field) =>{\r\n        if(field === 'p1'){\r\n            if(passwordRef.current) passwordRef.current.setAttribute('type','password');\r\n            if(p1Ref.current) p1Ref.current.classList.remove('visible');\r\n        }\r\n        if(field === 'p2'){\r\n            if(rePasswordRef.current) rePasswordRef.current.setAttribute('type','password');\r\n            if(p1Ref.current) p2Ref.current.classList.remove('visible');\r\n        }\r\n    }\r\n    console.log(id,token);\r\n    return (\r\n        <div className=\"forgot\">\r\n            <div className=\"forgot__center center\">\r\n                <div className=\"forgot__form\">\r\n                    <form>\r\n                        <h1>create new password</h1>\r\n                        <div>\r\n                            <div ref={p1Ref} className=\"input__wrapper\">\r\n                                <input onChange={()=>setPasswordError('')} ref={passwordRef} type=\"password\" placeholder=\"enter new password\"/>\r\n                                <AiFillEye onClick={()=>changeToText('p1')} className=\"show__eye\"/>\r\n                                <AiFillEyeInvisible onClick={()=>changeToPassword('p1')} className=\"hide__eye\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div ref={p2Ref} className=\"input__wrapper\">\r\n                                <input onChange={()=>setPasswordError('')} ref={rePasswordRef} type=\"password\" placeholder=\"re-enter new password\"/>\r\n                                <AiFillEye onClick={()=>changeToText('p2')} className=\"show__eye\"/>\r\n                                <AiFillEyeInvisible onClick={()=>changeToPassword('p2')} className=\"hide__eye\"/>\r\n                            </div>\r\n                        </div>\r\n                        {passwordError === ''?null: <p className=\"forgot__error\">{passwordError}</p> }\r\n                        <div className=\"btn-wrapper\"><button  onClick={e=>resetPassword(e)}>change password</button></div>\r\n                    </form>\r\n                    <div className=\"auth__spinner\" ref={spinnerRef}><BiLoaderAlt /></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forgot\r\n"],"sourceRoot":""}