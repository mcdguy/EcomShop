{"version":3,"sources":["pages/Location/index.js","components/error/index.js"],"names":["Location","useState","map","setMap","selectedMarker","setSelectedMarker","queryLocation","setQueryLocation","locations","setLocations","locationStates","setLocationStates","showDropdown","setShowDropdown","loading","setLoading","error","setError","useEffect","axios","then","res","data","stateArray","Set","loc","state","catch","err","i","length","flyTo","geometry","coordinates","className","onClick","index","e","_id","id","handleMarkerClick","subLocation","timings","address","whenCreated","center","zoom","attribution","url","shop","position","Error"],"mappings":"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","file":"static/js/9.ae16c9b8.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport './location.css';\r\nimport axios from 'axios';\r\nimport Loader from '../../components/loader';\r\nimport Error from '../../components/error';\r\nconst Location = () => {\r\n    const [map,setMap] = useState(null);\r\n    const [selectedMarker,setSelectedMarker] = useState(null);\r\n    const [queryLocation,setQueryLocation] = useState('delhi');\r\n    const [locations, setLocations] = useState([]);\r\n    const [locationStates,setLocationStates] = useState([]);\r\n    const [showDropdown,setShowDropdown] = useState(false);\r\n    const [loading,setLoading] = useState(true);\r\n    const [error,setError] = useState(false);\r\n\r\n    //marker popup\r\n    const handleMarkerClick = (id) =>{\r\n        for(let i=0;i<locations.length;i++){\r\n            if(locations[i]._id === id){\r\n                setSelectedMarker(id);\r\n                if(map){\r\n                    map.flyTo(locations[i].geometry.coordinates,15);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //fetching locations\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setError(false);\r\n        axios(`/location`)\r\n            .then(res =>{\r\n                if(res.data.locations){\r\n                    setLocations(res.data.locations);\r\n                    const stateArray = new Set(res.data.locations.map(loc => loc.state));\r\n                    setLocationStates([...stateArray]);\r\n                    setLoading(false);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setError(true);\r\n            });\r\n    },[]);\r\n    \r\n    //selects a location on map\r\n    useEffect(()=>{\r\n        for(let i=0;i<locations.length;i++){\r\n            if(locations[i].state === queryLocation){\r\n                if(map){\r\n                    map.flyTo(locations[i].geometry.coordinates,11);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },[queryLocation,locations]);\r\n\r\n    if(loading){\r\n        return <Loader/>\r\n    }\r\n    if(error){\r\n        return <Error/>\r\n    }\r\n    if(!locations.length){\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"map__center center\">\r\n                <div className=\"map__info\">\r\n                    <div>\r\n                        <div className=\"custom__select\">\r\n                            <div className=\"custom__select__head button__effect\" onClick={()=>setShowDropdown(!showDropdown)}>{queryLocation}</div>\r\n                            {showDropdown?<div className=\"custom__select__options\">\r\n                                {locationStates.length?\r\n                                    locationStates.map((state,index)=> <div key={index} onClick={e=>{setQueryLocation(state);setShowDropdown(!showDropdown);}}>{state}</div>)\r\n                                :null}\r\n                            </div>:null}\r\n                        </div>\r\n                        <div className=\"map__stores\">\r\n                            {locations.map(loc=>{\r\n                                if(loc.state === queryLocation){\r\n                                    return(\r\n                                        <div className={`${selectedMarker===loc._id?'location__address selected':'location__address'}`} key={loc._id} onClick={()=>handleMarkerClick(loc._id)}>\r\n                                            <h1 className=\"loc__head\">{loc.subLocation}</h1>\r\n                                            <h4>{loc.timings}</h4>\r\n                                            <p>{loc.address}</p>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"mapid\">\r\n                    {locations.length?\r\n                        <MapContainer whenCreated={map=>{setMap(map)}} center={[28.55919136650141, 77.16127199503]} zoom={11}>\r\n                            <TileLayer\r\n                            attribution= '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                            //    attribution='&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            //    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                               url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\r\n                            />\r\n                            {locations.length && locations.map(shop =>{\r\n                                return(\r\n                                    // <Marker icon={customMarker} key={shop._id} position={[shop.geometry.coordinates[0],shop.geometry.coordinates[1]]}>\r\n                                    // <Marker ref={selectedMarker === shop._id?markerRef:null} key={shop._id} position={[shop.geometry.coordinates[0],shop.geometry.coordinates[1]]}>\r\n                                    <Marker key={shop._id} position={[shop.geometry.coordinates[0],shop.geometry.coordinates[1]]}>\r\n                                        <Popup>\r\n                                            <h1>{shop.address}</h1>\r\n                                            <h4>{shop.timings}</h4>\r\n                                        </Popup>\r\n                                    </Marker>\r\n                                )\r\n                            })}\r\n                        </MapContainer>\r\n                    :'no locations available' }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n","import React from 'react';\r\nimport './error.css';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div className=\"fetch__error\">\r\n            <h1>an error occurred</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n"],"sourceRoot":""}